{"version":3,"sources":["NavBar.js","Emperor.js","api.js","Emperors.js","House.js","Houses.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["NavBar","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","color","Emperor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","render","emperor","props","ListItem_default","alignItems","key","name","ListItemAvatar_default","Avatar_default","alt","src","imageUrl","ListItemText_default","primary","secondary","Fragment","component","house","Component","API","GraphQLSchema","people","GraphQLObjectType","fields","image","type","GraphQLString","id","GraphQLInt","groups","query","fetch","method","headers","content-type","body","JSON","stringify","json","data","request","emperors","houses","Emperors","state","api","componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","t0","t1","sent","t2","setState","stop","List_default","map","Emperor_Emperor","House","open","toggle","onClick","ExpandLess_default","ExpandMore_default","Collapse_default","in","timeout","unmountOnExit","members","Houses","House_House","App","value","handleChange","event","className","src_NavBar","Tabs_default","onChange","centered","Tab_default","label","icon","Person_default","People_default","Grid_default","container","justify","Emperors_Emperors","Houses_Houses","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.469e0b0d.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst NavBar = () => {\n    return(\n        <div>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"title\" color=\"inherit\">\n                        Holy Roman Emperors\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\nexport default NavBar;","import React, { Component } from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\n\nexport default class Emperor extends Component {\n    constructor() {\n        super();\n    }\n\n\n    render = () => {\n        const { emperor } = this.props;\n\n        return (\n            <ListItem alignItems=\"flex-start\" key={emperor.name}>\n                <ListItemAvatar>\n                    <Avatar alt={emperor.name} src={emperor.imageUrl} />\n                </ListItemAvatar>\n                <ListItemText primary={emperor.name}\n                secondary={\n                    <React.Fragment>\n                        <Typography component=\"span\" color=\"textPrimary\">\n                            {emperor.house.name}\n                        </Typography>\n                    </React.Fragment>\n                }\n                />\n            </ListItem>\n        );  \n    }\n}","\nimport {\n    graphql,\n    GraphQLSchema,\n    GraphQLObjectType,\n    GraphQLString,\n    GraphQLInt\n  } from 'graphql';  \n\nexport const schema = new GraphQLSchema({\n    people: new GraphQLObjectType({\n        name: 'people',\n        fields: {\n            image: {\n                type: GraphQLString\n            },\n            name: {\n                type: GraphQLString\n            },\n            id: {\n                type: GraphQLInt\n            }\n        }\n    }),\n    groups: new GraphQLObjectType({\n        name: 'groups',\n        fields: {\n            name: {\n                type: GraphQLString\n            }\n        }\n    })\n});\n\nexport default class API {\n    constructor() {\n\n    }\n\n    async request(query) {\n        return (await (await fetch(`http://localhost:4000/graphql`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify({ query })\n        })).json()).data;\n    } \n\n    async emperors() {\n        return (await this.request(`\n            query {\n                emperors {\n                    name\n                    imageUrl\n                    house {\n                        name\n                    }\n                }\n            }\n        `)).emperors;\n    }\n\n    async houses() {\n        return (await this.request(`\n            query {\n                houses {\n                    name\n                    members {\n                        name,\n                        imageUrl\n                    }\n                }\n            }\n        `)).houses;\n    }\n}","import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport Emperor from './Emperor';\nimport API from './api';\n\nexport default class Emperors extends Component {\n    state = {\n        emperors: []\n    }\n\n    api = new API();\n\n    constructor() {\n        super();\n    }\n\n    componentDidMount = async () => {\n        this.setState({ emperors: await this.api.emperors() });\n    }\n\n    render = () => {\n        return (\n            <div>\n                <List>\n                    {this.state.emperors && this.state.emperors.map((emperor) => {\n                        return (\n                            <Emperor emperor={emperor}></Emperor>\n                        );\n                    })}\n                </List>\n            </div>\n        );  \n    }\n}","import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Emperor from './Emperor';\n\nexport default class House extends Component {\n    state = {\n        open: false\n    }\n\n    constructor() {\n        super();\n    }\n\n    toggle = () => {\n        this.setState(state => ({ open: !state.open }));\n    };\n\n    render = () => {\n        const { house } = this.props;\n        return (\n            <div key={house.name}>\n                <ListItem alignItems=\"flex-start\" onClick={this.toggle}>\n                    <ListItemText primary={house.name} />\n                    {this.state.open ? <ExpandLess /> : <ExpandMore />}\n                </ListItem>\n                <Collapse in={this.state.open} timeout=\"auto\" unmountOnExit>\n                    {\n                        house.members.map((emperor) => {\n                            emperor.house = house;\n                            return (<Emperor emperor={emperor}></Emperor>);\n                        })\n                    }\n                </Collapse>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\nimport API from './api';\nimport House from './House';\n\nexport default class Houses extends Component {\n    state = {\n        emperors: []\n    }\n\n    api = new API();\n\n    constructor() {\n        super();\n    }\n\n    componentDidMount = async () => {\n        this.setState({ houses: await this.api.houses() });\n    }\n\n    render = () => {\n        return (\n            <div>\n                <List>\n                    {this.state.houses && this.state.houses.map((house) => {\n                        return (\n                            <House house={house}></House>\n                        );\n                    })}\n                </List>\n            </div>\n        );  \n    }\n}","import React, { Component } from 'react';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport Grid from '@material-ui/core/Grid';\nimport PeopleIcon from '@material-ui/icons/People';\nimport PersonIcon from '@material-ui/icons/Person';\nimport logo from './logo.svg';\nimport  NavBar from './NavBar';\nimport Emperors from './Emperors';\nimport Houses from './Houses';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    value: 0,\n  };\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render = () => {\n    const { value } = this.state;\n\n    return (\n      <div className='App'>\n        <NavBar></NavBar>\n        <Tabs value={value} onChange={this.handleChange} centered>\n            <Tab label='Emperors' icon={<PersonIcon />} />\n            <Tab label='Houses' icon={<PeopleIcon />} />\n        </Tabs>\n        <Grid container justify=\"center\">\n          {value === 0 && <Emperors></Emperors>}\n          {value === 1 && <Houses></Houses>}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}